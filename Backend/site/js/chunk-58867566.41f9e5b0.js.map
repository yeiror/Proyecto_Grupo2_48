{"version":3,"sources":["webpack:///../../../src/components/VFileInput/VFileInput.ts","webpack:///../../../src/components/VTextField/index.ts","webpack:///../../../src/components/VAutocomplete/VAutocomplete.ts","webpack:///../../../src/components/VCombobox/VCombobox.ts","webpack:///../../../src/components/VForm/VForm.ts"],"names":["name","model","prop","event","props","chips","clearable","type","default","counterSizeString","counterString","hideInput","multiple","placeholder","prependIcon","readonly","showSize","Boolean","validator","v","includes","smallChips","truncateLength","Number","value","val","computed","classes","computedCounterValue","fileCount","this","lazyValue","$vuetify","lang","t","bytes","internalArrayValue","reduce","size","base","internalValue","get","set","isDirty","length","isLabelActive","text","persistentPlaceholder","map","file","truncatedText","hasChips","watch","handler","immediate","$refs","input","methods","clearableCallback","genChips","small","on","genControl","render","display","genInput","genPrependSlot","icon","genIcon","genSlot","genSelectionText","genSelections","children","$scopedSlots","index","$createElement","staticClass","class","selection","genTextFieldSlot","node","click","onInput","files","e","onKeyDown","truncateText","str","charsKeepOneSide","Math","defaultMenuProps","offsetY","offsetOverflow","transition","VSelect","allowOverflow","autoSelectFirst","filter","itemText","queryText","hideNoData","menuProps","noFilter","searchInput","String","data","lazySearch","selectedIndex","computedItems","selectedValues","selectedItems","item","hasDisplayedItems","hideSelected","filteredItems","some","currentRange","selectedItem","getText","internalSearch","allItems","isAnyValueAllowed","searchIsDirty","isSearching","menuCanShow","$_menuProps","find","i","listData","items","isFocused","document","isMenuActive","oldVal","activateMenu","created","destroyed","onFilteredItemsChanged","onInternalSearchChanged","updateMenuDimensions","menu","changeSelectedIndex","keyCode","deleteCurrentItem","curIndex","curItem","getDisabled","lastIndex","nextIndex","nextItem","VTextField","mergeData","attrs","autocomplete","domProps","genInputSlot","slot","hasSlot","onClick","isAppendInner","target","onSpaceDown","onTabDown","onUpDown","selectItem","setSelectedItems","setSearch","updateSelf","valueComparator","getValue","hasItem","indexOf","onCopy","currentItem","currentItemText","delimiters","returnObject","editingIndex","$slots","delimiter","d","genChipSelection","chip","dblclick","onChipInput","onEnterDown","getMenuIndex","selectionStart","toLocaleLowerCase","setValue","updateEditing","findIndex","Object","updateCombobox","isUsingSlot","updateTags","menuIndex","itemToSelect","onPaste","pastedItemText","findExistingIndex","provide","form","inheritAttrs","disabled","lazyValidation","inputs","watchers","errorBag","errors","deep","watchInput","watcher","_uid","valid","shouldValidate","validate","reset","resetErrorBag","setTimeout","resetValidation","register","unregister","found","unwatch","h","novalidate","attrs$","submit"],"mappings":"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","file":"js/chunk-58867566.41f9e5b0.js","sourcesContent":["// Styles\nimport './VFileInput.sass'\n\n// Extensions\nimport VTextField from '../VTextField'\n\n// Components\nimport { VChip } from '../VChip'\n\n// Types\nimport { PropValidator } from 'vue/types/options'\n\n// Utilities\nimport { deepEqual, humanReadableFileSize, wrapInArray } from '../../util/helpers'\nimport { consoleError } from '../../util/console'\nimport { mergeStyles } from '../../util/mergeData'\n\nexport default VTextField.extend({\n  name: 'v-file-input',\n\n  model: {\n    prop: 'value',\n    event: 'change',\n  },\n\n  props: {\n    chips: Boolean,\n    clearable: {\n      type: Boolean,\n      default: true,\n    },\n    counterSizeString: {\n      type: String,\n      default: '$vuetify.fileInput.counterSize',\n    },\n    counterString: {\n      type: String,\n      default: '$vuetify.fileInput.counter',\n    },\n    hideInput: Boolean,\n    multiple: Boolean,\n    placeholder: String,\n    prependIcon: {\n      type: String,\n      default: '$file',\n    },\n    readonly: {\n      type: Boolean,\n      default: false,\n    },\n    showSize: {\n      type: [Boolean, Number],\n      default: false,\n      validator: (v: boolean | number) => {\n        return (\n          typeof v === 'boolean' ||\n          [1000, 1024].includes(v)\n        )\n      },\n    } as PropValidator<boolean | 1000 | 1024>,\n    smallChips: Boolean,\n    truncateLength: {\n      type: [Number, String],\n      default: 22,\n    },\n    type: {\n      type: String,\n      default: 'file',\n    },\n    value: {\n      default: undefined,\n      validator: val => {\n        return wrapInArray(val).every(v => v != null && typeof v === 'object')\n      },\n    } as PropValidator<File | File[]>,\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        ...VTextField.options.computed.classes.call(this),\n        'v-file-input': true,\n      }\n    },\n    computedCounterValue (): string {\n      const fileCount = (this.multiple && this.lazyValue)\n        ? this.lazyValue.length\n        : (this.lazyValue instanceof File) ? 1 : 0\n\n      if (!this.showSize) return this.$vuetify.lang.t(this.counterString, fileCount)\n\n      const bytes = this.internalArrayValue.reduce((bytes: number, { size = 0 }: File) => {\n        return bytes + size\n      }, 0)\n\n      return this.$vuetify.lang.t(\n        this.counterSizeString,\n        fileCount,\n        humanReadableFileSize(bytes, this.base === 1024)\n      )\n    },\n    internalArrayValue (): File[] {\n      return wrapInArray(this.internalValue)\n    },\n    internalValue: {\n      get (): File[] {\n        return this.lazyValue\n      },\n      set (val: File | File[]) {\n        this.lazyValue = val\n        this.$emit('change', this.lazyValue)\n      },\n    },\n    isDirty (): boolean {\n      return this.internalArrayValue.length > 0\n    },\n    isLabelActive (): boolean {\n      return this.isDirty\n    },\n    text (): string[] {\n      if (!this.isDirty && (this.persistentPlaceholder || this.isFocused || !this.hasLabel)) return [this.placeholder]\n\n      return this.internalArrayValue.map((file: File) => {\n        const {\n          name = '',\n          size = 0,\n        } = file\n\n        const truncatedText = this.truncateText(name)\n\n        return !this.showSize\n          ? truncatedText\n          : `${truncatedText} (${humanReadableFileSize(size, this.base === 1024)})`\n      })\n    },\n    base (): 1000 | 1024 | undefined {\n      return typeof this.showSize !== 'boolean' ? this.showSize : undefined\n    },\n    hasChips (): boolean {\n      return this.chips || this.smallChips\n    },\n  },\n\n  watch: {\n    readonly: {\n      handler (v) {\n        if (v === true) consoleError('readonly is not supported on <v-file-input>', this)\n      },\n      immediate: true,\n    },\n    value (v) {\n      const value = this.multiple ? v : v ? [v] : []\n      if (!deepEqual(value, this.$refs.input.files)) {\n        // When the input value is changed programatically, clear the\n        // internal input's value so that the `onInput` handler\n        // can be triggered again if the user re-selects the exact\n        // same file(s). Ideally, `input.files` should be\n        // manipulated directly but that property is readonly.\n        this.$refs.input.value = ''\n      }\n    },\n  },\n\n  methods: {\n    clearableCallback () {\n      this.internalValue = this.multiple ? [] : null\n      this.$refs.input.value = ''\n    },\n    genChips () {\n      if (!this.isDirty) return []\n\n      return this.text.map((text, index) => this.$createElement(VChip, {\n        props: { small: this.smallChips },\n        on: {\n          'click:close': () => {\n            const internalValue = this.internalValue\n            internalValue.splice(index, 1)\n            this.internalValue = internalValue // Trigger the watcher\n          },\n        },\n      }, [text]))\n    },\n    genControl () {\n      const render = VTextField.options.methods.genControl.call(this)\n\n      if (this.hideInput) {\n        render.data!.style = mergeStyles(\n          render.data!.style,\n          { display: 'none' }\n        )\n      }\n\n      return render\n    },\n    genInput () {\n      const input = VTextField.options.methods.genInput.call(this)\n\n      input.data!.attrs!.multiple = this.multiple\n\n      // We should not be setting value\n      // programmatically on the input\n      // when it is using type=\"file\"\n      delete input.data!.domProps!.value\n\n      // This solves an issue in Safari where\n      // nothing happens when adding a file\n      // do to the input event not firing\n      // https://github.com/vuetifyjs/vuetify/issues/7941\n      delete input.data!.on!.input\n      input.data!.on!.change = this.onInput\n\n      return [this.genSelections(), input]\n    },\n    genPrependSlot () {\n      if (!this.prependIcon) return null\n\n      const icon = this.genIcon('prepend', () => {\n        this.$refs.input.click()\n      })\n\n      return this.genSlot('prepend', 'outer', [icon])\n    },\n    genSelectionText (): string[] {\n      const length = this.text.length\n\n      if (length < 2) return this.text\n      if (this.showSize && !this.counter) return [this.computedCounterValue]\n      return [this.$vuetify.lang.t(this.counterString, length)]\n    },\n    genSelections () {\n      const children = []\n\n      if (this.isDirty && this.$scopedSlots.selection) {\n        this.internalArrayValue.forEach((file: File, index: number) => {\n          if (!this.$scopedSlots.selection) return\n\n          children.push(\n            this.$scopedSlots.selection({\n              text: this.text[index],\n              file,\n              index,\n            })\n          )\n        })\n      } else {\n        children.push(this.hasChips && this.isDirty ? this.genChips() : this.genSelectionText())\n      }\n\n      return this.$createElement('div', {\n        staticClass: 'v-file-input__text',\n        class: {\n          'v-file-input__text--placeholder': this.placeholder && !this.isDirty,\n          'v-file-input__text--chips': this.hasChips && !this.$scopedSlots.selection,\n        },\n      }, children)\n    },\n    genTextFieldSlot () {\n      const node = VTextField.options.methods.genTextFieldSlot.call(this)\n\n      node.data!.on = {\n        ...(node.data!.on || {}),\n        click: () => this.$refs.input.click(),\n      }\n\n      return node\n    },\n    onInput (e: Event) {\n      const files = [...(e.target as HTMLInputElement).files || []]\n\n      this.internalValue = this.multiple ? files : files[0]\n\n      // Set initialValue here otherwise isFocused\n      // watcher in VTextField will emit a change\n      // event whenever the component is blurred\n      this.initialValue = this.internalValue\n    },\n    onKeyDown (e: KeyboardEvent) {\n      this.$emit('keydown', e)\n    },\n    truncateText (str: string) {\n      if (str.length < Number(this.truncateLength)) return str\n      const charsKeepOneSide = Math.floor((Number(this.truncateLength) - 1) / 2)\n      return `${str.slice(0, charsKeepOneSide)}…${str.slice(str.length - charsKeepOneSide)}`\n    },\n  },\n})\n","import VTextField from './VTextField'\n\nexport { VTextField }\nexport default VTextField\n","// Styles\nimport './VAutocomplete.sass'\n\n// Extensions\nimport VSelect, { defaultMenuProps as VSelectMenuProps } from '../VSelect/VSelect'\nimport VTextField from '../VTextField/VTextField'\n\n// Utilities\nimport mergeData from '../../util/mergeData'\nimport {\n  getObjectValueByPath,\n  getPropertyFromItem,\n  keyCodes,\n} from '../../util/helpers'\n\n// Types\nimport { PropType, VNode } from 'vue'\nimport { PropValidator } from 'vue/types/options'\n\nconst defaultMenuProps = {\n  ...VSelectMenuProps,\n  offsetY: true,\n  offsetOverflow: true,\n  transition: false,\n}\n\n/* @vue/component */\nexport default VSelect.extend({\n  name: 'v-autocomplete',\n\n  props: {\n    allowOverflow: {\n      type: Boolean,\n      default: true,\n    },\n    autoSelectFirst: {\n      type: Boolean,\n      default: false,\n    },\n    filter: {\n      type: Function,\n      default: (item: any, queryText: string, itemText: string) => {\n        return itemText.toLocaleLowerCase().indexOf(queryText.toLocaleLowerCase()) > -1\n      },\n    } as PropValidator<(item: any, queryText: string, itemText: string) => boolean>,\n    hideNoData: Boolean,\n    menuProps: {\n      type: VSelect.options.props.menuProps.type,\n      default: () => defaultMenuProps,\n    },\n    noFilter: Boolean,\n    searchInput: {\n      type: String as PropType<string | null>,\n    },\n  },\n\n  data () {\n    return {\n      lazySearch: this.searchInput,\n    }\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        ...VSelect.options.computed.classes.call(this),\n        'v-autocomplete': true,\n        'v-autocomplete--is-selecting-index': this.selectedIndex > -1,\n      }\n    },\n    computedItems (): object[] {\n      return this.filteredItems\n    },\n    selectedValues (): object[] {\n      return this.selectedItems.map(item => this.getValue(item))\n    },\n    hasDisplayedItems (): boolean {\n      return this.hideSelected\n        ? this.filteredItems.some(item => !this.hasItem(item))\n        : this.filteredItems.length > 0\n    },\n    currentRange (): number {\n      if (this.selectedItem == null) return 0\n\n      return String(this.getText(this.selectedItem)).length\n    },\n    filteredItems (): object[] {\n      if (!this.isSearching || this.noFilter || this.internalSearch == null) return this.allItems\n\n      return this.allItems.filter(item => {\n        const value = getPropertyFromItem(item, this.itemText)\n        const text = value != null ? String(value) : ''\n\n        return this.filter(item, String(this.internalSearch), text)\n      })\n    },\n    internalSearch: {\n      get (): string | null {\n        return this.lazySearch\n      },\n      set (val: any) { // TODO: this should be `string | null` but it breaks lots of other types\n        // emit update event only when the new\n        // search value is different from previous\n        if (this.lazySearch !== val) {\n          this.lazySearch = val\n          this.$emit('update:search-input', val)\n        }\n      },\n    },\n    isAnyValueAllowed (): boolean {\n      return false\n    },\n    isDirty (): boolean {\n      return this.searchIsDirty || this.selectedItems.length > 0\n    },\n    isSearching (): boolean {\n      return (\n        this.multiple &&\n        this.searchIsDirty\n      ) || (\n        this.searchIsDirty &&\n        this.internalSearch !== this.getText(this.selectedItem)\n      )\n    },\n    menuCanShow (): boolean {\n      if (!this.isFocused) return false\n\n      return this.hasDisplayedItems || !this.hideNoData\n    },\n    $_menuProps (): object {\n      const props = VSelect.options.computed.$_menuProps.call(this);\n      (props as any).contentClass = `v-autocomplete__content ${(props as any).contentClass || ''}`.trim()\n      return {\n        ...defaultMenuProps,\n        ...props,\n      }\n    },\n    searchIsDirty (): boolean {\n      return this.internalSearch != null &&\n        this.internalSearch !== ''\n    },\n    selectedItem (): any {\n      if (this.multiple) return null\n\n      return this.selectedItems.find(i => {\n        return this.valueComparator(this.getValue(i), this.getValue(this.internalValue))\n      })\n    },\n    listData () {\n      const data = VSelect.options.computed.listData.call(this) as any\n\n      data.props = {\n        ...data.props,\n        items: this.virtualizedItems,\n        noFilter: (\n          this.noFilter ||\n          !this.isSearching ||\n          !this.filteredItems.length\n        ),\n        searchInput: this.internalSearch,\n      }\n\n      return data\n    },\n  },\n\n  watch: {\n    filteredItems: 'onFilteredItemsChanged',\n    internalValue: 'setSearch',\n    isFocused (val) {\n      if (val) {\n        document.addEventListener('copy', this.onCopy)\n        this.$refs.input && this.$refs.input.select()\n      } else {\n        document.removeEventListener('copy', this.onCopy)\n        this.blur()\n        this.updateSelf()\n      }\n    },\n    isMenuActive (val) {\n      if (val || !this.hasSlot) return\n\n      this.lazySearch = null\n    },\n    items (val, oldVal) {\n      // If we are focused, the menu\n      // is not active, hide no data is enabled,\n      // and items change\n      // User is probably async loading\n      // items, try to activate the menu\n      if (\n        !(oldVal && oldVal.length) &&\n        this.hideNoData &&\n        this.isFocused &&\n        !this.isMenuActive &&\n        val.length\n      ) this.activateMenu()\n    },\n    searchInput (val: string) {\n      this.lazySearch = val\n    },\n    internalSearch: 'onInternalSearchChanged',\n    itemText: 'updateSelf',\n  },\n\n  created () {\n    this.setSearch()\n  },\n\n  destroyed () {\n    document.removeEventListener('copy', this.onCopy)\n  },\n\n  methods: {\n    onFilteredItemsChanged (val: never[], oldVal: never[]) {\n      // TODO: How is the watcher triggered\n      // for duplicate items? no idea\n      if (val === oldVal) return\n\n      this.setMenuIndex(-1)\n\n      this.$nextTick(() => {\n        if (\n          !this.internalSearch ||\n          (val.length !== 1 &&\n            !this.autoSelectFirst)\n        ) return\n\n        this.$refs.menu.getTiles()\n        this.setMenuIndex(0)\n      })\n    },\n    onInternalSearchChanged () {\n      this.updateMenuDimensions()\n    },\n    updateMenuDimensions () {\n      // Type from menuable is not making it through\n      this.isMenuActive && this.$refs.menu && this.$refs.menu.updateDimensions()\n    },\n    changeSelectedIndex (keyCode: number) {\n      // Do not allow changing of selectedIndex\n      // when search is dirty\n      if (this.searchIsDirty) return\n\n      if (this.multiple && keyCode === keyCodes.left) {\n        if (this.selectedIndex === -1) {\n          this.selectedIndex = this.selectedItems.length - 1\n        } else {\n          this.selectedIndex--\n        }\n      } else if (this.multiple && keyCode === keyCodes.right) {\n        if (this.selectedIndex >= this.selectedItems.length - 1) {\n          this.selectedIndex = -1\n        } else {\n          this.selectedIndex++\n        }\n      } else if (keyCode === keyCodes.backspace || keyCode === keyCodes.delete) {\n        this.deleteCurrentItem()\n      }\n    },\n    deleteCurrentItem () {\n      const curIndex = this.selectedIndex\n      const curItem = this.selectedItems[curIndex]\n\n      // Do nothing if input or item is disabled\n      if (\n        !this.isInteractive ||\n        this.getDisabled(curItem)\n      ) return\n\n      const lastIndex = this.selectedItems.length - 1\n\n      // Select the last item if\n      // there is no selection\n      if (\n        this.selectedIndex === -1 &&\n        lastIndex !== 0\n      ) {\n        this.selectedIndex = lastIndex\n\n        return\n      }\n\n      const length = this.selectedItems.length\n      const nextIndex = curIndex !== length - 1\n        ? curIndex\n        : curIndex - 1\n      const nextItem = this.selectedItems[nextIndex]\n\n      if (!nextItem) {\n        this.setValue(this.multiple ? [] : null)\n      } else {\n        this.selectItem(curItem)\n      }\n\n      this.selectedIndex = nextIndex\n    },\n    clearableCallback () {\n      this.internalSearch = null\n\n      VSelect.options.methods.clearableCallback.call(this)\n    },\n    genInput () {\n      const input = VTextField.options.methods.genInput.call(this)\n\n      input.data = mergeData(input.data!, {\n        attrs: {\n          'aria-activedescendant': getObjectValueByPath(this.$refs.menu, 'activeTile.id'),\n          autocomplete: getObjectValueByPath(input.data!, 'attrs.autocomplete', 'off'),\n        },\n        domProps: { value: this.internalSearch },\n      })\n\n      return input\n    },\n    genInputSlot () {\n      const slot = VSelect.options.methods.genInputSlot.call(this)\n\n      slot.data!.attrs!.role = 'combobox'\n\n      return slot\n    },\n    genSelections (): VNode | never[] {\n      return this.hasSlot || this.multiple\n        ? VSelect.options.methods.genSelections.call(this)\n        : []\n    },\n    onClick (e: MouseEvent) {\n      if (!this.isInteractive) return\n\n      this.selectedIndex > -1\n        ? (this.selectedIndex = -1)\n        : this.onFocus()\n\n      if (!this.isAppendInner(e.target)) this.activateMenu()\n    },\n    onInput (e: Event) {\n      if (\n        this.selectedIndex > -1 ||\n        !e.target\n      ) return\n\n      const target = e.target as HTMLInputElement\n      const value = target.value\n\n      // If typing and menu is not currently active\n      if (target.value) this.activateMenu()\n\n      this.internalSearch = value\n      this.badInput = target.validity && target.validity.badInput\n    },\n    onKeyDown (e: KeyboardEvent) {\n      const keyCode = e.keyCode\n\n      if (\n        e.ctrlKey ||\n        ![keyCodes.home, keyCodes.end].includes(keyCode)\n      ) {\n        VSelect.options.methods.onKeyDown.call(this, e)\n      }\n\n      // The ordering is important here\n      // allows new value to be updated\n      // and then moves the index to the\n      // proper location\n      this.changeSelectedIndex(keyCode)\n    },\n    onSpaceDown (e: KeyboardEvent) { /* noop */ },\n    onTabDown (e: KeyboardEvent) {\n      VSelect.options.methods.onTabDown.call(this, e)\n      this.updateSelf()\n    },\n    onUpDown (e: Event) {\n      // Prevent screen from scrolling\n      e.preventDefault()\n\n      // For autocomplete / combobox, cycling\n      // interfers with native up/down behavior\n      // instead activate the menu\n      this.activateMenu()\n    },\n    selectItem (item: object) {\n      VSelect.options.methods.selectItem.call(this, item)\n      this.setSearch()\n    },\n    setSelectedItems () {\n      VSelect.options.methods.setSelectedItems.call(this)\n\n      // #4273 Don't replace if searching\n      // #4403 Don't replace if focused\n      if (!this.isFocused) this.setSearch()\n    },\n    setSearch () {\n      // Wait for nextTick so selectedItem\n      // has had time to update\n      this.$nextTick(() => {\n        if (\n          !this.multiple ||\n          !this.internalSearch ||\n          !this.isMenuActive\n        ) {\n          this.internalSearch = (\n            !this.selectedItems.length ||\n            this.multiple ||\n            this.hasSlot\n          )\n            ? null\n            : this.getText(this.selectedItem)\n        }\n      })\n    },\n    updateSelf () {\n      if (\n        !this.searchIsDirty &&\n        !this.internalValue\n      ) return\n\n      if (\n        !this.multiple &&\n        !this.valueComparator(\n          this.internalSearch,\n          this.getValue(this.internalValue)\n        )\n      ) {\n        this.setSearch()\n      }\n    },\n    hasItem (item: any): boolean {\n      return this.selectedValues.indexOf(this.getValue(item)) > -1\n    },\n    onCopy (event: ClipboardEvent) {\n      if (this.selectedIndex === -1) return\n\n      const currentItem = this.selectedItems[this.selectedIndex]\n      const currentItemText = this.getText(currentItem)\n      event.clipboardData?.setData('text/plain', currentItemText)\n      event.clipboardData?.setData('text/vnd.vuetify.autocomplete.item+plain', currentItemText)\n      event.preventDefault()\n    },\n  },\n})\n","// Styles\nimport '../VAutocomplete/VAutocomplete.sass'\n\n// Extensions\nimport VSelect from '../VSelect/VSelect'\nimport VAutocomplete from '../VAutocomplete/VAutocomplete'\n\n// Utils\nimport { keyCodes } from '../../util/helpers'\n\n// Types\nimport { PropValidator } from 'vue/types/options'\n\n/* @vue/component */\nexport default VAutocomplete.extend({\n  name: 'v-combobox',\n\n  props: {\n    delimiters: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<string[]>,\n    returnObject: {\n      type: Boolean,\n      default: true,\n    },\n  },\n\n  data: () => ({\n    editingIndex: -1,\n  }),\n\n  computed: {\n    computedCounterValue (): number {\n      return this.multiple\n        ? this.selectedItems.length\n        : (this.internalSearch || '').toString().length\n    },\n    hasSlot (): boolean {\n      return VSelect.options.computed.hasSlot.call(this) || this.multiple\n    },\n    isAnyValueAllowed (): boolean {\n      return true\n    },\n    menuCanShow (): boolean {\n      if (!this.isFocused) return false\n\n      return this.hasDisplayedItems ||\n        (!!this.$slots['no-data'] && !this.hideNoData)\n    },\n    searchIsDirty (): boolean {\n      return this.internalSearch != null\n    },\n  },\n\n  methods: {\n    onInternalSearchChanged (val: any) {\n      if (\n        val &&\n        this.multiple &&\n        this.delimiters.length\n      ) {\n        const delimiter = this.delimiters.find(d => val.endsWith(d))\n        if (delimiter != null) {\n          this.internalSearch = val.slice(0, val.length - delimiter.length)\n          this.updateTags()\n        }\n      }\n\n      this.updateMenuDimensions()\n    },\n    genInput () {\n      const input = VAutocomplete.options.methods.genInput.call(this)\n\n      delete input.data!.attrs!.name\n      input.data!.on!.paste = this.onPaste\n\n      return input\n    },\n    genChipSelection (item: object, index: number) {\n      const chip = VSelect.options.methods.genChipSelection.call(this, item, index)\n\n      // Allow user to update an existing value\n      if (this.multiple) {\n        chip.componentOptions!.listeners! = {\n          ...chip.componentOptions!.listeners!,\n          dblclick: () => {\n            this.editingIndex = index\n            this.internalSearch = this.getText(item)\n            this.selectedIndex = -1\n          },\n        }\n      }\n\n      return chip\n    },\n    onChipInput (item: object) {\n      VSelect.options.methods.onChipInput.call(this, item)\n\n      this.editingIndex = -1\n    },\n    // Requires a manual definition\n    // to overwrite removal in v-autocomplete\n    onEnterDown (e: Event) {\n      e.preventDefault()\n      // If has menu index, let v-select-list handle\n      if (this.getMenuIndex() > -1) return\n\n      this.$nextTick(this.updateSelf)\n    },\n    onFilteredItemsChanged (val: never[], oldVal: never[]) {\n      if (!this.autoSelectFirst) return\n\n      VAutocomplete.options.methods.onFilteredItemsChanged.call(this, val, oldVal)\n    },\n    onKeyDown (e: KeyboardEvent) {\n      const keyCode = e.keyCode\n\n      if (\n        e.ctrlKey ||\n        ![keyCodes.home, keyCodes.end].includes(keyCode)\n      ) {\n        VSelect.options.methods.onKeyDown.call(this, e)\n      }\n\n      // If user is at selection index of 0\n      // create a new tag\n      if (this.multiple &&\n        keyCode === keyCodes.left &&\n        this.$refs.input.selectionStart === 0\n      ) {\n        this.updateSelf()\n      } else if (keyCode === keyCodes.enter) {\n        this.onEnterDown(e)\n      }\n\n      // The ordering is important here\n      // allows new value to be updated\n      // and then moves the index to the\n      // proper location\n      this.changeSelectedIndex(keyCode)\n    },\n    onTabDown (e: KeyboardEvent) {\n      // When adding tags, if searching and\n      // there is not a filtered options,\n      // add the value to the tags list\n      if (this.multiple &&\n        this.internalSearch &&\n        this.getMenuIndex() === -1\n      ) {\n        e.preventDefault()\n        e.stopPropagation()\n\n        return this.updateTags()\n      }\n\n      VAutocomplete.options.methods.onTabDown.call(this, e)\n    },\n    selectItem (item: object) {\n      // Currently only supports items:<string[]>\n      if (this.editingIndex > -1) {\n        this.updateEditing()\n      } else {\n        VAutocomplete.options.methods.selectItem.call(this, item)\n\n        // if selected item contains search value,\n        // remove the search string\n        if (\n          this.internalSearch &&\n          this.multiple &&\n          this.getText(item).toLocaleLowerCase().includes(this.internalSearch.toLocaleLowerCase())\n        ) {\n          this.internalSearch = null\n        }\n      }\n    },\n    setSelectedItems () {\n      if (this.internalValue == null ||\n        this.internalValue === ''\n      ) {\n        this.selectedItems = []\n      } else {\n        this.selectedItems = this.multiple ? this.internalValue : [this.internalValue]\n      }\n    },\n    setValue (value?: any) {\n      VSelect.options.methods.setValue.call(this, value ?? this.internalSearch)\n    },\n    updateEditing () {\n      const value = this.internalValue.slice()\n      const index = this.selectedItems.findIndex(item =>\n        this.getText(item) === this.internalSearch)\n\n      // If user enters a duplicate text on chip edit,\n      // don't add it, move it to the end of the list\n      if (index > -1) {\n        const item = typeof value[index] === 'object'\n          ? Object.assign({}, value[index])\n          : value[index]\n\n        value.splice(index, 1)\n        value.push(item)\n      } else {\n        value[this.editingIndex] = this.internalSearch\n      }\n\n      this.setValue(value)\n      this.editingIndex = -1\n      this.internalSearch = null\n    },\n    updateCombobox () {\n      // If search is not dirty, do nothing\n      if (!this.searchIsDirty) return\n\n      // The internal search is not matching\n      // the internal value, update the input\n      if (this.internalSearch !== this.getText(this.internalValue)) this.setValue()\n\n      // Reset search if using slot to avoid a double input\n      const isUsingSlot = Boolean(this.$scopedSlots.selection) || this.hasChips\n      if (isUsingSlot) this.internalSearch = null\n    },\n    updateSelf () {\n      this.multiple ? this.updateTags() : this.updateCombobox()\n    },\n    updateTags () {\n      const menuIndex = this.getMenuIndex()\n\n      // If the user is not searching\n      // and no menu item is selected\n      // or if the search is empty\n      // do nothing\n      if ((menuIndex < 0 && !this.searchIsDirty) ||\n          !this.internalSearch) return\n\n      if (this.editingIndex > -1) {\n        return this.updateEditing()\n      }\n\n      const index = this.selectedItems.findIndex(item =>\n        this.internalSearch === this.getText(item))\n\n      // If the duplicate item is an object,\n      // copy it, so that it can be added again later\n      const itemToSelect = index > -1 && typeof this.selectedItems[index] === 'object'\n        ? Object.assign({}, this.selectedItems[index])\n        : this.internalSearch\n\n      // If it already exists, do nothing\n      // this might need to change to bring\n      // the duplicated item to the last entered\n      if (index > -1) {\n        const internalValue = this.internalValue.slice()\n        internalValue.splice(index, 1)\n\n        this.setValue(internalValue)\n      }\n\n      // If menu index is greater than 1\n      // the selection is handled elsewhere\n      // TODO: find out where\n      if (menuIndex > -1) return (this.internalSearch = null)\n\n      this.selectItem(itemToSelect)\n\n      this.internalSearch = null\n    },\n    onPaste (event: ClipboardEvent) {\n      if (!this.multiple || this.searchIsDirty) return\n\n      const pastedItemText = event.clipboardData?.getData('text/vnd.vuetify.autocomplete.item+plain')\n      if (pastedItemText && this.findExistingIndex(pastedItemText as any) === -1) {\n        event.preventDefault()\n        VSelect.options.methods.selectItem.call(this, pastedItemText as any)\n      }\n    },\n    clearableCallback () {\n      this.editingIndex = -1\n\n      VAutocomplete.options.methods.clearableCallback.call(this)\n    },\n  },\n})\n","// Components\nimport VInput from '../VInput/VInput'\n\n// Mixins\nimport mixins from '../../util/mixins'\nimport BindsAttrs from '../../mixins/binds-attrs'\nimport { provide as RegistrableProvide } from '../../mixins/registrable'\n\n// Helpers\nimport { VNode } from 'vue'\n\ntype ErrorBag = Record<number, boolean>\ntype VInputInstance = InstanceType<typeof VInput>\ntype Watchers = {\n  _uid: number\n  valid: () => void\n  shouldValidate: () => void\n}\n\n/* @vue/component */\nexport default mixins(\n  BindsAttrs,\n  RegistrableProvide('form')\n  /* @vue/component */\n).extend({\n  name: 'v-form',\n\n  provide (): object {\n    return { form: this }\n  },\n\n  inheritAttrs: false,\n\n  props: {\n    disabled: Boolean,\n    lazyValidation: Boolean,\n    readonly: Boolean,\n    value: Boolean,\n  },\n\n  data: () => ({\n    inputs: [] as VInputInstance[],\n    watchers: [] as Watchers[],\n    errorBag: {} as ErrorBag,\n  }),\n\n  watch: {\n    errorBag: {\n      handler (val) {\n        const errors = Object.values(val).includes(true)\n\n        this.$emit('input', !errors)\n      },\n      deep: true,\n      immediate: true,\n    },\n  },\n\n  methods: {\n    watchInput (input: any): Watchers {\n      const watcher = (input: any): (() => void) => {\n        return input.$watch('hasError', (val: boolean) => {\n          this.$set(this.errorBag, input._uid, val)\n        }, { immediate: true })\n      }\n\n      const watchers: Watchers = {\n        _uid: input._uid,\n        valid: () => {},\n        shouldValidate: () => {},\n      }\n\n      if (this.lazyValidation) {\n        // Only start watching inputs if we need to\n        watchers.shouldValidate = input.$watch('shouldValidate', (val: boolean) => {\n          if (!val) return\n\n          // Only watch if we're not already doing it\n          if (this.errorBag.hasOwnProperty(input._uid)) return\n\n          watchers.valid = watcher(input)\n        })\n      } else {\n        watchers.valid = watcher(input)\n      }\n\n      return watchers\n    },\n    /** @public */\n    validate (): boolean {\n      return this.inputs.filter(input => !input.validate(true)).length === 0\n    },\n    /** @public */\n    reset (): void {\n      this.inputs.forEach(input => input.reset())\n      this.resetErrorBag()\n    },\n    resetErrorBag () {\n      if (this.lazyValidation) {\n        // Account for timeout in validatable\n        setTimeout(() => {\n          this.errorBag = {}\n        }, 0)\n      }\n    },\n    /** @public */\n    resetValidation () {\n      this.inputs.forEach(input => input.resetValidation())\n      this.resetErrorBag()\n    },\n    register (input: VInputInstance) {\n      this.inputs.push(input)\n      this.watchers.push(this.watchInput(input))\n    },\n    unregister (input: VInputInstance) {\n      const found = this.inputs.find(i => i._uid === input._uid)\n\n      if (!found) return\n\n      const unwatch = this.watchers.find(i => i._uid === found._uid)\n      if (unwatch) {\n        unwatch.valid()\n        unwatch.shouldValidate()\n      }\n\n      this.watchers = this.watchers.filter(i => i._uid !== found._uid)\n      this.inputs = this.inputs.filter(i => i._uid !== found._uid)\n      this.$delete(this.errorBag, found._uid)\n    },\n  },\n\n  render (h): VNode {\n    return h('form', {\n      staticClass: 'v-form',\n      attrs: {\n        novalidate: true,\n        ...this.attrs$,\n      },\n      on: {\n        submit: (e: Event) => this.$emit('submit', e),\n      },\n    }, this.$slots.default)\n  },\n})\n"],"sourceRoot":""}